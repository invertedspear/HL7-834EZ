if(segment.length>3){//not sure what a good sane number is here
					let type = segment.split("*")[0];
					switch(type){
						case "ISA" : //Interchange Control Header
							detailedConsole && console.log('processing ISA header');
							let thisISA = new ISA(segment);
							detailedConsole && console.dir(thisISA);
							document.getElementById('status').innerHTML += 'ISA header ignored.<br />';
						break;
						case "GS":
							let thisGS = new GS(segment);
							detailedConsole && console.dir(thisGS);
							document.getElementById('status').innerHTML += 'GS header ignored.<br />';
						break;
						case "ST":
							detailedConsole && console.log('processing ST header');
							let thisST = new ST(segment);
							detailedConsole && console.dir(thisST);
							document.getElementById('status').innerHTML += 'Cheking Set Type... ';
							
							if(thisST.TransactionSetIDCode != 834){
								document.getElementById('status').innerHTML += '834 not found. Abandoning process.';
								return
							}else{
								document.getElementById('status').innerHTML += '834 found, continuing<br />';
								detailedConsole && console.log('File type is good');
							}
						break;
						case "BGN":
							let thisBGN = new BGN(segment);
							detailedConsole && console.dir(thisBGN);
							document.getElementById('status').innerHTML += 'BGN header ignored.<br />';
						break;
						case "DTP":
							let thisDTP = new DTP(segment);
							thisDTP.QualifierDesc = DTPCodeDictionary[thisDTP.Qualifier];
							thisDTP.FormattedDate = dateFromString(thisDTP.DTPString,thisDTP.Format,"MM/DD/YY");
							detailedConsole && console.dir(thisDTP);
							switch(thisDTP.QualifierDesc){
								case "EnrollmentFile":
									document.getElementById('status').innerHTML += 'Enrollment file DTP ignored.<br />';
								break;
								case "EmploymentBegin":
								case "EmploymentEnd":
									//ignore
								break;
								case "BenefitBegin":
									csvRow.Benefit_Start = thisDTP.FormattedDate;
								break;
								case "BenefitEnd":
									csvRow.Benefit_End = thisDTP.FormattedDate;
								break;
								default:
									document.getElementById('status').innerHTML += 'Unknown DTP type, Aborting: ' + segment.toString() + '<br />'
									return;
								break;
							}
							if(thisDTP.QualifierDesc == "EnrollmentFile"){
								document.getElementById('status').innerHTML += 'Enrollment file DTP ignored.<br />';
							}
						break;
						case "N1":
							let thisN1 = new Entity(segment);
							thisN1.EntityAction = N1CodeDictionary[thisN1.EntityIDCode].action;
							thisN1.EntityIDDesc = N1CodeDictionary[thisN1.EntityIDCode].description;
							detailedConsole && console.dir(thisN1);
							switch(thisN1.EntityAction){
								case "skip":
									document.getElementById('status').innerHTML += thisN1.EntityIDDesc + ' codes ignored.<br />';
								break;
								case "GetFederalID":
									if(thisN1.IDCodeQualifier == "FI"){
										PartnerFederalID = thisN1.IDCode;
										document.getElementById('status').innerHTML += 'Extracted Federal ID from Plan Sponsor<br />';
									}else{
										document.getElementById('status').innerHTML += 'Unhandled partner code type, Aborting: ' + segment.toString() + '<br />';
										return
									}
								break;
								default:
									document.getElementById('status').innerHTML += 'Unhandled segment type, Aborting: ' + segment.toString() + '<br />';
									return
								break;
							}
						break;
						case "INS":
							let thisINS = new INSSeg(segment);
							detailedConsole && console.dir(thisINS);
							//this starts and Insured Member Level Detail
							if(csvRow.Partner_Federal_ID){
								outText += writeRow(csvRow);
								recordCount ++;
								document.getElementById('status').innerHTML += 'Processed Subscriber ' + recordCount + ': ' + csvRow.Subscriber_Employee_Number + '<br />';
							}
							csvRow = new CSVRow();
							detailedConsole && console.dir(PartnerFederalID);
							csvRow.Partner_Federal_ID = PartnerFederalID;
							csvRow.Individual_Relationship_Code = thisINS.Individual_Relationship_Code;
							csvRow.Employment_Status_Code = thisINS.Employment_Status_Code;
							detailedConsole && console.dir(csvRow);
						break;
						case "REF":
							let thisRef = new REFSeg(segment)
							thisRef.ReferenceDesc = ReferenceIDQualifierCodeDictionary[thisRef.ReferenceIDQualifier]
							detailedConsole && console.dir(thisRef);
							switch(thisRef.ReferenceDesc){
								case "SubscriberNumber":
									csvRow.Subscriber_Employee_Number = thisRef.ReferenceValue;
								break;
								case "GroupOrPolicyNumber":
									csvRow.Member_Policy_Number = thisRef.ReferenceValue;
								break;
								case "DepartmentOrAgencyNumber":
								case "MutuallyDefined":
									//ignore
								break;
								default:
									document.getElementById('status').innerHTML += 'Unknown Reference type, Aborting: ' + segment.toString() + '<br />'
									return
								break;
							}
							detailedConsole && console.dir(csvRow);
						break;
						case "NM1":
							let thisNM1 = new NM1Seg(segment);
							thisNM1.EntityCodeDesc = EntityIdentfierCodeDictionay[thisNM1.EntityIDCode];
							detailedConsole && console.dir(thisNM1);
							switch(thisNM1.EntityCodeDesc){
								case "InsuredOrSubscriber":
									csvRow.First_Name = thisNM1.MemberFirstName;
									csvRow.Last_Name = thisNM1.MemberLastName;
									csvRow.Middle_Name = thisNM1.MemberMiddleName;
								break;
								default:
									document.getElementById('status').innerHTML += 'Unknown NM1 identifier, Aborting: ' + segment.toString() + '<br />'
									return
								break;
							}
							
							detailedConsole && console.dir(csvRow);
						break;
						case "PER": //Contact type and detail, ie Home phone 555-123-4567 or Email user@company.tld
							let thisPER = new PERSeg(segment);
							thisPER.ContactFunctionDesc = ContactFunctionCodeDict[thisPER.ContactFunctionCode];
							thisPER.CommunicationDescription = CommunicationTypeQualifierDict[thisPER.CommunicationNumberQualifier];
							thisPER.CommunicationDescription2 = CommunicationTypeQualifierDict[thisPER.CommunicationNumberQualifier2];
							detailedConsole && console.dir(thisPER);
							if(["Home","Cellular","Telephone","Work"].indexOf(thisPER.CommunicationDescription) > -1){
								csvRow.Phone_Number = thisPER.CommunicationNumber;
							}else if(["Home","Cellular","Telephone","Work"].indexOf(thisPER.CommunicationDescription2) > -1){
								csvRow.Phone_Number = thisPER.CommunicationNumber2;
							}
							detailedConsole && console.dir(csvRow);
						break;
						case "N3": //street address
							let thisN3 = new N3Seg(segment);
							detailedConsole && console.dir(thisN3);
							csvRow.Address_1 = thisN3.AddressLine1;
							csvRow.Address_2 = thisN3.AddressLine2;
							detailedConsole && console.dir(csvRow);
						break;
						case "N4":// City state zip
							let thisN4 = new N4Seg(segment);
							detailedConsole && console.dir(thisN4);
							csvRow.City = thisN4.City;
							csvRow.State = thisN4.State;
							csvRow.ZipCode = thisN4.PostalCode;
							detailedConsole && console.dir(csvRow);
						break;
						case "DMG": //Demographic
							let demographic = new DMGSeg(segment);
							demographic.MaritalStatusDesc = MaritalStatusCodeDict[demographic.MaritalStatus];
							detailedConsole && console.dir(demographic);
							detailedConsole && console.dir(dateFromString(demographic.DOB,demographic.DTPFormat));
							csvRow.DOB = dateFromString(demographic.DOB,demographic.DTPFormat,"MM/DD/YY");
							csvRow.Gender = demographic.GenderCode;
							detailedConsole && console.dir(csvRow);
						break;
						case "HD":
							let planInfo = new HDSeg(segment);
							planInfo.MaintenanceTypeDesc = MaintenanceTypeCodeDict[planInfo.MaintenanceTypeCode];
							planInfo.InsuranceLineDesc = InsuranceLineCodeDict[planInfo.InsuranceLineCode];
							detailedConsole && console.dir(planInfo);
							if(planInfo.InsuranceLineDesc == "Health"){
								csvRow.Plan_Coverage_Description = planInfo.PlanCoverageDescription;
							}
							detailedConsole && console.dir(csvRow);
						break;
						case "SE":
							document.getElementById('status').innerHTML += 'SE footer ignored.<br />';
						break;
						case "GE":
							//currently ignored
							document.getElementById('status').innerHTML += 'GE footer ignored.<br />';
						break;
						case "IEA":
							document.getElementById('status').innerHTML += 'IEA footer ignored.<br />';
						break;
						case "ICM":
							document.getElementById('status').innerHTML += 'ICM segment ignored. <br />';
						break;
						case "LX"://line counter.... not yet sure what this is for
							document.getElementById('status').innerHTML += 'LX segment ignored. <br />';
						break;
						default:
							document.getElementById('status').innerHTML += 'Unknown segment type, Aborting: ' + segment.toString() + '<br />'
							return
						break;
					}
				}